[
  {
    "id": "eldercare-main-flow",
    "type": "tab",
    "label": "Elder Care MQTT Integration",
    "disabled": false,
    "info": "Main flow for processing Elder Care MQTT messages and controlling smart home devices"
  },
  {
    "id": "mqtt-in-commands",
    "type": "mqtt in",
    "z": "eldercare-main-flow",
    "name": "Elder Commands",
    "topic": "eldercare/commands/+/+",
    "qos": "2",
    "datatype": "json",
    "broker": "mqtt-broker",
    "x": 120,
    "y": 100,
    "wires": [["command-router"]]
  },
  {
    "id": "command-router",
    "type": "switch",
    "z": "eldercare-main-flow",
    "name": "Route Commands",
    "property": "payload.device_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "lights",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "thermostat",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "locks",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "security",
        "vt": "str"
      }
    ],
    "checkall": "false",
    "repair": false,
    "outputs": 4,
    "x": 300,
    "y": 100,
    "wires": [
      ["lights-control"],
      ["thermostat-control"],
      ["locks-control"],
      ["security-control"]
    ]
  },
  {
    "id": "lights-control",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Process Lights",
    "func": "const command = msg.payload;\nconst action = command.action;\nconst params = command.parameters || {};\nconst room = command.room || 'living_room';\n\n// Build device-specific command\nlet deviceCommand = {\n    device: `${room}_light`,\n    action: action,\n    brightness: params.brightness || 255,\n    color: params.color || 'white'\n};\n\n// For Philips Hue\nif (action === 'turn_on') {\n    msg.payload = {\n        on: true,\n        bri: Math.round(params.brightness * 254 / 100) || 254\n    };\n    msg.topic = `zigbee2mqtt/${room}_light/set`;\n} else if (action === 'turn_off') {\n    msg.payload = { on: false };\n    msg.topic = `zigbee2mqtt/${room}_light/set`;\n}\n\n// Store original command for response\nmsg.originalCommand = command;\n\nreturn msg;",
    "outputs": 1,
    "x": 500,
    "y": 60,
    "wires": [["mqtt-out-device", "send-response"]]
  },
  {
    "id": "thermostat-control",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Process Thermostat",
    "func": "const command = msg.payload;\nconst action = command.action;\nconst params = command.parameters || {};\n\nif (action === 'set_temperature') {\n    msg.payload = {\n        temperature: params.temperature || 22,\n        mode: params.mode || 'auto'\n    };\n    msg.topic = 'zigbee2mqtt/thermostat/set';\n} else if (action === 'set_mode') {\n    msg.payload = {\n        mode: params.mode || 'auto'\n    };\n    msg.topic = 'zigbee2mqtt/thermostat/set';\n}\n\nmsg.originalCommand = command;\nreturn msg;",
    "outputs": 1,
    "x": 500,
    "y": 100,
    "wires": [["mqtt-out-device", "send-response"]]
  },
  {
    "id": "locks-control",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Process Locks",
    "func": "const command = msg.payload;\nconst action = command.action;\nconst room = command.room || 'front_door';\n\nif (action === 'lock') {\n    msg.payload = { state: 'LOCK' };\n    msg.topic = `zigbee2mqtt/${room}_lock/set`;\n} else if (action === 'unlock') {\n    msg.payload = { state: 'UNLOCK' };\n    msg.topic = `zigbee2mqtt/${room}_lock/set`;\n}\n\nmsg.originalCommand = command;\nreturn msg;",
    "outputs": 1,
    "x": 500,
    "y": 140,
    "wires": [["mqtt-out-device", "send-response"]]
  },
  {
    "id": "security-control",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Process Security",
    "func": "const command = msg.payload;\nconst action = command.action;\n\nif (action === 'arm') {\n    msg.payload = { state: 'ARM_HOME' };\n    msg.topic = 'security/alarm/set';\n} else if (action === 'disarm') {\n    msg.payload = { state: 'DISARM' };\n    msg.topic = 'security/alarm/set';\n}\n\nmsg.originalCommand = command;\nreturn msg;",
    "outputs": 1,
    "x": 500,
    "y": 180,
    "wires": [["mqtt-out-device", "send-response"]]
  },
  {
    "id": "mqtt-out-device",
    "type": "mqtt out",
    "z": "eldercare-main-flow",
    "name": "Send to Device",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "broker": "mqtt-broker",
    "x": 720,
    "y": 120,
    "wires": []
  },
  {
    "id": "send-response",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Send Response",
    "func": "const command = msg.originalCommand;\n\n// Build response\nconst response = {\n    status: 'success',\n    elder_name: command.elder_name,\n    device_type: command.device_type,\n    action: command.action,\n    timestamp: new Date().toISOString(),\n    executed: true\n};\n\n// Set response topic\nmsg.topic = `eldercare/responses/${command.device_type}/${command.elder_name}`;\nmsg.payload = response;\n\nreturn msg;",
    "outputs": 1,
    "x": 720,
    "y": 180,
    "wires": [["mqtt-out-response"]]
  },
  {
    "id": "mqtt-out-response",
    "type": "mqtt out",
    "z": "eldercare-main-flow",
    "name": "Response to AI",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "broker": "mqtt-broker",
    "x": 900,
    "y": 180,
    "wires": []
  },
  {
    "id": "mqtt-in-emergency",
    "type": "mqtt in",
    "z": "eldercare-main-flow",
    "name": "Emergency Alerts",
    "topic": "eldercare/emergency/+",
    "qos": "2",
    "datatype": "json",
    "broker": "mqtt-broker",
    "x": 120,
    "y": 300,
    "wires": [["emergency-processor"]]
  },
  {
    "id": "emergency-processor",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Process Emergency",
    "func": "const emergency = msg.payload;\nconst severity = emergency.severity;\n\n// Determine actions based on severity\nlet actions = [];\n\nif (severity === 'critical' || severity === 'high') {\n    // Turn on all lights\n    actions.push({\n        topic: 'zigbee2mqtt/all_lights/set',\n        payload: { state: 'ON', brightness: 255 }\n    });\n    \n    // Unlock doors for emergency access\n    actions.push({\n        topic: 'zigbee2mqtt/front_door_lock/set',\n        payload: { state: 'UNLOCK' }\n    });\n    \n    // Send notification\n    actions.push({\n        topic: 'notifications/emergency',\n        payload: {\n            title: 'ðŸš¨ EMERGENCY ALERT',\n            message: `${emergency.elder_name}: ${emergency.message}`,\n            priority: 'high'\n        }\n    });\n    \n    // Call emergency services if critical\n    if (severity === 'critical') {\n        actions.push({\n            topic: 'emergency_services/call',\n            payload: {\n                location: emergency.location,\n                message: emergency.message,\n                elder_name: emergency.elder_name\n            }\n        });\n    }\n}\n\n// Send all actions\nfor (let action of actions) {\n    node.send({\n        topic: action.topic,\n        payload: action.payload\n    });\n}\n\nreturn null;",
    "outputs": 1,
    "x": 330,
    "y": 300,
    "wires": [["mqtt-out-emergency"]]
  },
  {
    "id": "mqtt-out-emergency",
    "type": "mqtt out",
    "z": "eldercare-main-flow",
    "name": "Emergency Actions",
    "topic": "",
    "qos": "2",
    "retain": "false",
    "broker": "mqtt-broker",
    "x": 550,
    "y": 300,
    "wires": []
  },
  {
    "id": "mqtt-in-health",
    "type": "mqtt in",
    "z": "eldercare-main-flow",
    "name": "Health Metrics",
    "topic": "eldercare/health/+",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt-broker",
    "x": 120,
    "y": 400,
    "wires": [["health-analyzer"]]
  },
  {
    "id": "health-analyzer",
    "type": "function",
    "z": "eldercare-main-flow",
    "name": "Analyze Health",
    "func": "const health = msg.payload;\nconst metric = health.metric_type;\nconst value = parseFloat(health.value);\nconst elderName = health.elder_name;\n\nlet alert = false;\nlet alertMessage = '';\n\n// Health thresholds\nswitch(metric) {\n    case 'heart_rate':\n        if (value > 100 || value < 60) {\n            alert = true;\n            alertMessage = `Abnormal heart rate: ${value} bpm`;\n        }\n        break;\n    case 'blood_pressure':\n        if (value > 140) {\n            alert = true;\n            alertMessage = `High blood pressure: ${value} mmHg`;\n        }\n        break;\n    case 'temperature':\n        if (value > 38 || value < 36) {\n            alert = true;\n            alertMessage = `Abnormal body temperature: ${value}Â°C`;\n        }\n        break;\n}\n\nif (alert) {\n    // Send health alert\n    msg.payload = {\n        elder_name: elderName,\n        alert_type: 'health_alert',\n        metric: metric,\n        value: value,\n        message: alertMessage,\n        severity: 'medium',\n        timestamp: new Date().toISOString()\n    };\n    msg.topic = 'eldercare/emergency/medium';\n    return msg;\n}\n\n// Store to database (optional)\nmsg.payload = {\n    elder_name: elderName,\n    metric: metric,\n    value: value,\n    timestamp: new Date().toISOString()\n};\nmsg.topic = 'database/health_metrics';\nreturn msg;",
    "outputs": 1,
    "x": 320,
    "y": 400,
    "wires": [["mqtt-out-health"]]
  },
  {
    "id": "mqtt-out-health",
    "type": "mqtt out",
    "z": "eldercare-main-flow",
    "name": "Health Alerts",
    "topic": "",
    "qos": "1",
    "retain": "false",
    "broker": "mqtt-broker",
    "x": 520,
    "y": 400,
    "wires": []
  },
  {
    "id": "mqtt-broker",
    "type": "mqtt-broker",
    "name": "Elder Care MQTT",
    "broker": "localhost",
    "port": "1883",
    "clientid": "eldercare-nodered",
    "usetls": false,
    "compatmode": false,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "eldercare/system/nodered",
    "birthQos": "0",
    "birthPayload": "online",
    "closeTopic": "eldercare/system/nodered",
    "closeQos": "0",
    "closePayload": "offline",
    "willTopic": "eldercare/system/nodered",
    "willQos": "0",
    "willPayload": "offline"
  }
]